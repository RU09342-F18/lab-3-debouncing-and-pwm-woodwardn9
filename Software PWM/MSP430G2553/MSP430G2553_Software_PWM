#include <msp430.h> 


/**
 * main.c
 */
int main(void)
{
    WDTCTL = WDTPW + WDTHOLD; //Watchdog
    BCSCTL3 = LFXT1S_2; //Enables crystal
    P1DIR |= 0X41; //PIN 1.6 (GREEN LED) and PIN 1.0 (RED LED) are set as outputs
    P1SEL |= 0X40; //Pin 1.6 selected for PWM output
    P1OUT |= BIT3; //Pull down resistor
    P1REN |= BIT3; //Sets BIT3 to be enabled
    P1IE |= BIT3; //Enables interrupt on Pin 1.3 (Button)
    P1IES |= BIT3; //Enables high - to - low behavior on interrupt (Button press)

    CCR0 = 1000; //PWM Maximum Period
    CCTL1 = OUTMOD_7;
    CCR1 = 500; //This code will initially start at ~50% Duty Cycle
    TACTL = TASSEL_1 + MC_1; //ACLK in Up Mode
    __enable_interrupt(); //Enables Interrupts
    
while(1)
{
    //Hold loop
}
}

#pragma vector = PORT1_VECTOR //Port 1 Interrupt that is triggered when Pin 1.3 is set from high to low (Pressing the button)
__interrupt void Port_1(void)
{
    if((P1IN & BIT3) == 0) //checks to see if the button is pressed down
    {
        P1OUT ^= 0X01; //Toggles PIN 1.0 (RED LED) to indicate a button press

        if(CCR1 < CCR0) //Checks to see if the value of CCR1 is less than the value of CCR0
        {
            CCR1 += 100; //increments duty cycle by 100 HZ
        }
        else
        {
            CCR1 = 0; //Resets CCR1 back to 0, causing a 0% duty cycle
        }
    }
        else
        {
        }
    P1IFG &= ~BIT3; //Resets interrupt flag initially triggered
}
